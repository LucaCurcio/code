# -*- coding: utf-8 -*-
"""missing_values.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jVqIzLxTF1T1wqiKPtJ4Wv0n_uWDzMAk
"""

import pandas as pd
from sklearn import tree
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
import numpy as np

dados_treino = pd.read_csv('treino.csv', index_col='Id')
dados_teste = pd.read_csv('teste.csv', index_col='Id')

dados_treino.head()

dados_treino.Alley.isnull()

dados_treino.Alley.isna()

dados_treino.Alley.isna().sum()

dados_treino.Alley.isnull().sum()

dados_treino_copia = dados_treino.copy()

dados_treino_copia.drop('Alley', axis=1).head(5)

X = dados_treino_copia.select_dtypes(exclude=['object'])
X.info()

X.dropna(axis=0, subset=['SalePrice'], inplace=True)

y = X.SalePrice

X.drop(['SalePrice'], axis=1, inplace=True)

X_treino, X_valid, y_treino, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2, random_state=42)

cols_cat = [coluna for coluna in X_treino.columns
            if X_treino[coluna].nunique() < 10 
            and X_treino[coluna].dtype == "object"]

cols_num = [coluna for coluna in X_treino.columns 
            if X_treino[coluna].dtype in ['int64' , 'float64']]

cols_num[:5]

cols = cols_cat + cols_num
X_treino_sel = X_treino[cols].copy()
X_valid_sel = X_valid[cols].copy()
X_teste_sel = dados_teste[cols].copy()

from sklearn.impute import SimpleImputer

transformer_num = SimpleImputer(strategy='median')

from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline

transformer_cat = Pipeline(
                    steps=[( 'imputacao', SimpleImputer(strategy='constant')),
                           ('encoding', OneHotEncoder(handle_unknown='ignore'))])

transformers = [('transformer_num', transformer_num, cols_num),
                ('transformer_cat', transformer_cat, cols_cat)]

from sklearn.compose import ColumnTransformer

preprocessor = ColumnTransformer(transformers)

model = RandomForestRegressor(n_estimators=50, random_state=42)
pipe = Pipeline(steps=[('preprocessor', preprocessor),
                       ('model', model) ])

from sklearn.model_selection import cross_val_score
maes = -1 * cross_val_score(pipe, X, y, cv=5, scoring='neg_mean_absolute_error')
maes

pipe.fit(X_treino_sel, y_treino)

preds = pipe.predict(X_valid_sel)

mae = mean_absolute_error(y_valid, preds)
mae

